AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Stack for todo-houessou-com attachement service"

Globals:
  Function:
    Runtime: python3.8

Resources:
  FilesApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: dev
      Auth:
        Authorizers:
          TodoAuthorizer:
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: 
                !Join
                  - ''
                  - - 'https://cognito-idp.'
                    - '${AWS::Region}'
                    - '.amazonaws.com/'
                    - !ImportValue todo-houessou-com-TodoUserPool
              audience: 
                - !ImportValue todo-houessou-com-TodoUserPoolClient
        DefaultAuthorizer: TodoAuthorizer
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - DELETE
          - HEAD
          - PUT
        AllowOrigins:
          - https://todo.houessou.com
        AllowHeaders:
          - '*'
  
  getTodoFiles:
    Type: AWS::Serverless::Function
    Properties:
      Environment: 
        Variables:
          TODOFILES_TABLE: !Ref TodoFilesTable 
      CodeUri: ./functions
      Handler: getTodoFiles.lambda_handler
      Events:
        getFilesApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref FilesApi
            Path: /{todoID}/files
            Method: GET
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: 
                - 'dynamodb:*'
                - 's3:GetObject'
                - 's3:ListBucket'
              Resource:
                - !GetAtt 'TodoFilesTable.Arn'
                - !Join [ '', [ !GetAtt 'TodoFilesTable.Arn', '/index/*' ] ] 
                - !GetAtt 'TodoFilesBucket.Arn'
                - !Join ['', [!GetAtt 'TodoFilesBucket.Arn', '/*']]
        
  addTodoFiles:
    Type: AWS::Serverless::Function
    Properties:
      Environment: 
        Variables:
          TODOFILES_TABLE: !Ref TodoFilesTable 
          TODOFILES_BUCKET: !Ref TodoFilesBucket
          TODOFILES_BUCKET_CDN: !GetAtt 'TodoFilesBucketCF.DomainName' 
      CodeUri: ./functions
      Handler: addTodoFiles.lambda_handler
      Events:
        addTodoApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref FilesApi
            Path: /{todoID}/files/upload
            Method: POST
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: 
                - 'dynamodb:*'
                - 's3:PutObject'
                - 's3:ListBucket'
              Resource:
                - !GetAtt 'TodoFilesTable.Arn'
                - !GetAtt 'TodoFilesBucket.Arn'
                - !Join ['', [!GetAtt 'TodoFilesBucket.Arn', '/*']]

  deleteTodoFile:
    Type: AWS::Serverless::Function
    Properties:
      Environment: 
        Variables:
          TODOFILES_TABLE: !Ref TodoFilesTable 
          TODOFILES_BUCKET: !Ref TodoFilesBucket
          TODOFILES_BUCKET_CDN: !GetAtt 'TodoFilesBucketCF.DomainName' 
      CodeUri: ./functions
      Handler: deleteTodoFile.lambda_handler
      Events:
        deleteTodoApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref FilesApi
            Path: /{todoID}/files/{fileID}/delete
            Method: DELETE
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: 
                - 'dynamodb:*'
                - 's3:PutObject'
                - 's3:GetObject'
                - 's3:DeleteObject'
                - 's3:ListBucket'
              Resource:
                - !GetAtt 'TodoFilesTable.Arn'
                - !GetAtt 'TodoFilesBucket.Arn'
                - !Join ['', [!GetAtt 'TodoFilesBucket.Arn', '/*']]

  # dynamoDB table to store todos files url
  TodoFilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'TodoFilesTable-${AWS::StackName}'
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions: 
        - AttributeName: "fileID"
          AttributeType: "S"
        - AttributeName: "todoID"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "fileID"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: "todoIDIndex"
          KeySchema:
            - AttributeName: "todoID"
              KeyType: "HASH"
            - AttributeName: "fileID"
              KeyType: "RANGE"
          Projection: 
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

  # S3 bucket to store todos files
  TodoFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'hpf-todo-app-files' 
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
            AllowedOrigins:
              - 'https://todo.houessou.com'
  
  TodoFilesBucketOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Join ['', ['access-identity-', !Ref TodoFilesBucket, '.s3.amazonaws.com'] ]

  TodoFilesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TodoFilesBucket
      PolicyDocument:  
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
            Resource: !Join ['', [!GetAtt 'TodoFilesBucket.Arn', '/*'] ]
            Principal: 
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${TodoFilesBucketOAI}'

  TodoFilesBucketCF:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Join ['', ['CDN for ', !Ref TodoFilesBucket] ]
        Enabled: 'true'
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - DELETE
            - POST
            - GET
            - OPTIONS
            - PUT
            - PATCH
          ForwardedValues:
            QueryString: 'false'
          TargetOriginId: !Join ['', [!Ref 'TodoFilesBucket', '.s3.us-east-1.amazonaws.com'] ]
          ViewerProtocolPolicy: redirect-to-https
        Origins:
          - S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${TodoFilesBucketOAI}'
            DomainName: !Join ['', [!Ref 'TodoFilesBucket', '.s3.us-east-1.amazonaws.com'] ]
            Id: !Join ['', [!Ref 'TodoFilesBucket', '.s3.us-east-1.amazonaws.com'] ]
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'

  TodoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub 'IdentityPool_todo_houessou_com'
      AllowUnauthenticatedIdentities: true
              
  TodoIdentityPoolRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'identity-pool-role-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: 
                - "cognito-identity.amazonaws.com"
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition: { "ForAnyValue:StringLike": {"cognito-identity.amazonaws.com:amr": "unauthenticated" },  "StringEquals": {"cognito-identity.amazonaws.com:aud": !Ref TodoIdentityPool}}
      Path: "/"
      Policies:
        - PolicyName: !Sub 'identity-pool-role-policy-${AWS::StackName}'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - "s3:ListBucket"
                  - "s3:PutObject*"
                  - "s3:GetObject*"
                Resource :
                  - !GetAtt 'TodoFilesBucket.Arn'
                  - !Join ['', [!GetAtt 'TodoFilesBucket.Arn', '/*']]

  TodoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties: 
      IdentityPoolId: !Ref TodoIdentityPool
      Roles: {"unauthenticated": !GetAtt TodoIdentityPoolRole.Arn }
  

Outputs:
  FilesApi:
    Value: !Join [ '', ['https://', !Ref FilesApi, '.execute-api.us-east-1.amazonaws.com/dev'] ]
    Export:
      Name: !Sub "${AWS::StackName}-FilesApiURL"
  TodoFilesTable:
    Value: !Ref TodoFilesTable 
    Export:
      Name: !Sub "${AWS::StackName}-TodoFilesTable"
  TodoFilesTableArn:
    Value: !GetAtt 'TodoFilesTable.Arn' 
    Export:
      Name: !Sub "${AWS::StackName}-TodoFilesTableArn"
  TodoFilesBucket:
    Value: !Ref 'TodoFilesBucket' 
    Export:
      Name: !Sub "${AWS::StackName}-TodoFilesBucket"
  TodoFilesBucketCFDomainName:
    Value: !GetAtt 'TodoFilesBucketCF.DomainName' 
    Export:
      Name: !Sub "${AWS::StackName}-TodoFilesBucketCFDomainName"
  TodoFilesBucketArn:
    Value: !GetAtt 'TodoFilesBucket.Arn' 
    Export:
      Name: !Sub "${AWS::StackName}-TodoFilesBucketArn"
  TodoIdentityPoolId:
    Value: !Ref 'TodoIdentityPool'
    Export:
      Name: !Sub "${AWS::StackName}-TodoIdentityPoolId"
  StackName: 
    Value: !Sub "${AWS::StackName}"